`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01/31/2022 02:05:58 PM
// Design Name: 
// Module Name: miniproject_1
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module miniproj1(
    input clk, // clock
    input reset, // reset value for button reset
    input [1:0] speed,
    input [15:0] sw,
    input sensA, sensB,
    output [15:0] LED,
    output ena, enb,
    output in1, in2, in3, in4,
    
    output f, b,
    output [3:0] an
    );
    
    localparam N = 18;
    reg [N-1:0] count;
    reg [1:0] sseg_temp;
    reg [1:0] sseg;
    reg [3:0] an_temp;
    
    reg [24:0] counter = 0;
    reg [19:0] width;
    reg temp_PWM;
    
    initial begin
        counter = 0;
        width = 0;
        temp_PWM = 0;
    end
    
    always@(posedge clk) begin
        if(counter <= 2000000)
            counter <= counter + 1;
        else
            counter <= 0;
    end
    
    always @ (posedge clk or posedge reset) begin
    if (reset)
        count <= 0;
    else
        count <= count + 1;
    end
    
    always @ (*) begin
        case({speed})
            20'd1 : width = 20'd400144;
            20'd2 : width = 20'd8333333;
            20'd3 : width = 20'd1600000;
            default : width = 20'd0;
        endcase
    end
    
    always @ (*)
        begin case(count[N-1:N-2])
            2'b00:
                begin
                    an_temp = 4'b1110;
                end
        endcase
    end
    
    assign an = an_temp;
    
//    always @ (*) begin
//        case(sseg)
//            4'd0 : sseg_temp = 2'b1100000;
//            4'd1 : sseg_temp = 2'b0111000;
//            default : sseg_temp = 2'b0111111;
//        endcase
//    end
    
    always @ (*) begin
        if(sw[2] == 0 || sw[3] == 0)
            case(sseg)
                2'd0 : sseg_temp = 3'b1100000;
            default : sseg_temp = 3'b0000001;
            endcase
        if(sw[2] == 1 || sw[3] == 1)
            case(sseg)
                2'd1 : sseg_temp = 3'b0111000;
            default : sseg_temp = 3'b0000001;
            endcase
    end
    assign {f,b} = sseg_temp;
    
    //tertiary operator (?) -> If sw 1 on then hbridge IN = 1001 else 0110
    assign ena = ((sw[5] == 1) && ((sw[4] == 1 && counter < 800000) || (sw[4] == 0 && counter < 3000000))) ? 1:0;
    assign in1 = (sw[3] ==  1) ? 1:0;
    assign in2 = (~(sw[3] == 1)) ? 1:0;
    
    assign enb = ((sw[0] == 1) && ((sw[1] == 1 && counter < 800000) || (sw[1] == 0 && counter < 3000000))) ? 1:0;
    assign in3 = (sw[2] == 1) ? 1:0;
    assign in4 = (~(sw[2] == 1)) ? 1:0;
    
    assign LED6 = (sensB == 1) ? 1:0;
    assign LED7 = (sensA == 1) ? 1:0; 
    
endmodule
